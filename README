# Secure and Interactive Web Application with EJS and MongoDB Atlas

## Overview
This project is a secure and interactive web application built with **Node.js, Express, MongoDB Atlas, and EJS**. It features user authentication, session management, CRUD operations, and security mechanisms like password hashing and account locking. The application is designed to be deployed on **Render.com**.

## Features
- **User Authentication:**
  - Registration and login system with hashed passwords using `bcrypt`
  ![alt text](image.png)
  - Session-based authentication using `express-session`
  ![alt text](image-1.png)
  - Role-based access control (admin and regular users)
- **Security Features:**
  - Account locking after 5 failed login attempts
  ![alt text](image-2.png)
  - Password reset functionality via email (`nodemailer`)
- **Database Management:**
  - MongoDB Atlas integration for cloud database storage
  - CRUD operations (Create, Read, Update, Delete) for user data
- **EJS Templating:**
  - Dynamic rendering of user data with `EJS`
  - Bootstrap-styled forms and UI components
- **Deployment:**
  - Configured for deployment on **Heroku**
  - Uses **environment variables** for sensitive data management

## Technologies Used
- **Backend:** Node.js, Express.js
- **Frontend:** EJS, Bootstrap
- **Database:** MongoDB Atlas (via Mongoose)
- **Authentication:** bcrypt, express-session
- **Security & Validation:** dotenv, crypto, nodemailer

## Installation & Setup
### Prerequisites
Make sure you have **Node.js** and **MongoDB Atlas** set up.

### 1. Clone the Repository
```bash
git clone https://github.com/your-repo.git
cd your-repo
```

### 2. Install Dependencies
```bash
npm install
```

### 3. Set Up Environment Variables
Create a `.env` file in the root directory and add the following:
```env
DB_URL=your-mongodb-atlas-url
EMAIL=your-email@gmail.com
EMAIL_PSWRD=your-email-password
SECRET_KEY=your-secret-key
```

### 4. Run the Application Locally
```bash
npm start
```
Then, open `http://localhost:3000` in your browser.

## Deployment on Heroku
1. **Create a Heroku App**:
   ```bash
   heroku create your-app-name
   ```
2. **Add MongoDB Atlas Configuration**:
   ```bash
   heroku config:set DB_URL=your-mongodb-atlas-url
   heroku config:set EMAIL=your-email@gmail.com
   heroku config:set EMAIL_PSWRD=your-email-password
   ```
3. **Deploy the App**:
   ```bash
   git add .
   git commit -m "Deploy to Heroku"
   git push heroku main
   ```
4. **Open the Deployed App**:
   ```bash
   heroku open
   ```

## Usage
1. **Register** a new admin account.
2. **Log in** with the admin account.
3. **Add, edit, and delete** student records.
4. **Reset password** via email if forgotten.
5. **Deploy to Heroku** for public access.

## Project Structure
```
ðŸ“‚ project-root/
 â”œâ”€â”€ ðŸ“‚ views/ (EJS templates)
 â”‚   â”œâ”€â”€ index.ejs
 â”‚   â”œâ”€â”€ add.ejs
 â”‚   â”œâ”€â”€ edit.ejs
 â”‚   â”œâ”€â”€ login.ejs
 â”‚   â”œâ”€â”€ register.ejs
 â”‚   â”œâ”€â”€ forgot-password.ejs
 â”‚   â”œâ”€â”€ reset-password.ejs
 â”œâ”€â”€ ðŸ“‚ public/ (Static assets)
 â”‚   â”œâ”€â”€ styles.css
 â”œâ”€â”€ ðŸ“‚ models/ (Mongoose schemas)
 â”œâ”€â”€ ðŸ“‚ routes/ (Express routes)
 â”œâ”€â”€ server.js (Main application file)
 â”œâ”€â”€ package.json
 â”œâ”€â”€ .env (Environment variables)
 â””â”€â”€ README.md (Project Documentation)
```

## Additional Features to Implement
- Implement **CSRF protection** using `csurf`
- Improve **error handling** using `express-validator`
- Implement **profile picture upload** feature

## License
This project is licensed under the **MIT License**.

---
**Author:** Your Name  
**GitHub:** [Your GitHub Profile](https://github.com/your-profile)  
**Deployed App:** [Your Heroku Link](https://your-heroku-app.herokuapp.com/)

